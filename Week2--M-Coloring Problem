class solve {
    
    boolean isPossible(int node,ArrayList<ArrayList<Integer>> edge,int col[],int i){
        for(int it: edge.get(node)){
            if(col[it]==i)return false;
        }
        return true;
    }
    
    boolean solve(int node,  ArrayList<ArrayList<Integer>> edge,int col[],int n,int m){
    	
        if(node==n)return true;
        
        for(int i=1;i<=m;i++){
            if(isPossible(node,edge,col,i)==true){
                col[node]=i;
                if(solve(node+1,edge,col,n,m)==true)  return true;
                col[node]=0;
            }
        }
        return false;
    }
    
    
    
    public boolean graphColoring(boolean graph[][], int m, int n) {
        ArrayList<ArrayList<Integer>> edge=new ArrayList<>();
            
        for(int i=0;i<n;i++)edge.add(new ArrayList<>());
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(graph[i][j]==true){                   
                    edge.get(i).add(j);
                    edge.get(j).add(i);
                }
            }
        }
        int col[]=new int[n];
     
        if(solve(0,edge,col,n,m)==true)return true;
        else return false;
    }
}
